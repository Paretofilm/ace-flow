# ACE-Flow AWS Pipeline CloudFormation Template
# Automates creation of IAM user, policies, and Amplify app for GitHub Actions integration

AWSTemplateFormatVersion: '2010-09-09'
Description: 'ACE-Flow: Complete AWS Amplify Gen 2 + GitHub Actions CI/CD pipeline setup'

Parameters:
  ProjectName:
    Type: String
    Description: Name of your ACE-Flow project
    MinLength: 3
    MaxLength: 50
    AllowedPattern: '^[a-zA-Z0-9-]+$'
    ConstraintDescription: 'Project name must be 3-50 characters, alphanumeric and hyphens only'
    
  GitHubRepository:
    Type: String
    Description: GitHub repository in format 'username/repository-name'
    AllowedPattern: '^[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+$'
    ConstraintDescription: 'Must be in format username/repository-name'
    
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub personal access token for repository access
    MinLength: 40
    ConstraintDescription: 'GitHub token must be at least 40 characters'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
      - Label:
          default: "GitHub Integration"
        Parameters:
          - GitHubRepository
          - GitHubToken
    ParameterLabels:
      ProjectName:
        default: "ACE-Flow Project Name"
      GitHubRepository:
        default: "GitHub Repository"
      GitHubToken:
        default: "GitHub Access Token"

Resources:
  # IAM User for GitHub Actions
  GitHubActionsUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub 'ace-flow-github-actions-${ProjectName}'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: ACE-Flow-GitHub-Actions
        - Key: ManagedBy
          Value: CloudFormation

  # Access Key for GitHub Actions User
  GitHubActionsAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref GitHubActionsUser

  # Attach AWS Managed Policy for Amplify Backend Deployment
  AmplifyBackendDeployPolicy:
    Type: AWS::IAM::UserPolicyAttachment
    Properties:
      UserName: !Ref GitHubActionsUser
      PolicyArn: 'arn:aws:iam::aws:policy/AmplifyBackendDeployFullAccess'

  # Additional IAM Policy for Amplify App Management
  AmplifyAppManagementPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'ace-flow-amplify-app-management-${ProjectName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - amplify:GetApp
              - amplify:UpdateApp
              - amplify:ListApps
              - amplify:GetBranch
              - amplify:UpdateBranch
              - amplify:ListBranches
              - amplify:CreateDeployment
              - amplify:GetDeployment
              - amplify:ListDeployments
              - amplify:StartDeployment
              - amplify:StopDeployment
              - amplify:GetWebhook
              - amplify:CreateWebhook
              - amplify:UpdateWebhook
              - amplify:ListWebhooks
            Resource: !Sub 'arn:aws:amplify:${AWS::Region}:${AWS::AccountId}:apps/${AmplifyApp}/*'
          - Effect: Allow
            Action:
              - amplify:GetApp
              - amplify:UpdateApp
            Resource: !Sub 'arn:aws:amplify:${AWS::Region}:${AWS::AccountId}:apps/${AmplifyApp}'
      Users:
        - !Ref GitHubActionsUser

  # Amplify Application
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Ref ProjectName
      Description: !Sub 'ACE-Flow project: ${ProjectName}'
      Repository: !Sub 'https://github.com/${GitHubRepository}'
      AccessToken: !Ref GitHubToken
      Platform: WEB
      BuildSpec: |
        version: 1
        applications:
          - frontend:
              phases:
                preBuild:
                  commands:
                    - echo "Frontend build managed by GitHub Actions"
                    - echo "Backend deployment via npx ampx pipeline-deploy"
                build:
                  commands:
                    - echo "Build artifacts generated by custom CI/CD pipeline"
                    - |
                      if [ -f "amplify_outputs.json" ]; then
                        echo "✅ amplify_outputs.json found - backend deployed successfully"
                      else
                        echo "⚠️  amplify_outputs.json not found - check backend deployment"
                      fi
              artifacts:
                baseDirectory: dist
                files:
                  - '**/*'
              cache:
                paths:
                  - node_modules/**/*
      EnvironmentVariables:
        - Name: AMPLIFY_MONOREPO_APP_ROOT
          Value: ''
        - Name: AMPLIFY_DIFF_DEPLOY
          Value: 'false'
        - Name: AMPLIFY_DIFF_DEPLOY_ROOT
          Value: '.'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: ACE-Flow
        - Key: ManagedBy
          Value: CloudFormation

  # Main Branch with Auto-Build Disabled
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      Description: 'Main production branch for ACE-Flow'
      EnableAutoBuild: false
      EnablePullRequestPreview: false
      EnvironmentVariables:
        - Name: AMPLIFY_CUSTOM_PIPELINE
          Value: 'true'
        - Name: ACE_FLOW_BRANCH
          Value: 'main'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: production

  # Webhook for Frontend Builds (triggered by GitHub Actions)
  AmplifyWebhook:
    Type: AWS::Amplify::Webhook
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: !GetAtt AmplifyBranch.BranchName
      Description: 'ACE-Flow GitHub Actions webhook for frontend builds'

  # Custom Resource to Store Secrets in Systems Manager (alternative to manual GitHub secrets)
  SecretsManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ace-flow-secrets-manager-${ProjectName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                  - ssm:AddTagsToResource
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ace-flow/${ProjectName}/*'

  # Lambda Function to Store Configuration
  StoreConfigFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ace-flow-config-${ProjectName}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SecretsManagerRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  ssm = boto3.client('ssm')
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      project_name = event['ResourceProperties']['ProjectName']
                      
                      # Store configuration in Parameter Store
                      parameters = {
                          'amplify-app-id': event['ResourceProperties']['AmplifyAppId'],
                          'amplify-webhook-url': event['ResourceProperties']['WebhookUrl'],
                          'github-repository': event['ResourceProperties']['GitHubRepository'],
                          'aws-region': event['ResourceProperties']['Region']
                      }
                      
                      for key, value in parameters.items():
                          ssm.put_parameter(
                              Name=f'/ace-flow/{project_name}/{key}',
                              Value=value,
                              Type='String',
                              Overwrite=True,
                              Tags=[
                                  {'Key': 'Project', 'Value': project_name},
                                  {'Key': 'Purpose', 'Value': 'ACE-Flow'}
                              ]
                          )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
                  elif event['RequestType'] == 'Delete':
                      project_name = event['ResourceProperties']['ProjectName']
                      
                      # Clean up parameters
                      parameter_names = [
                          f'/ace-flow/{project_name}/amplify-app-id',
                          f'/ace-flow/{project_name}/amplify-webhook-url',
                          f'/ace-flow/{project_name}/github-repository',
                          f'/ace-flow/{project_name}/aws-region'
                      ]
                      
                      for param_name in parameter_names:
                          try:
                              ssm.delete_parameter(Name=param_name)
                          except ssm.exceptions.ParameterNotFound:
                              pass  # Parameter already deleted
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(f'Error: {str(e)}')
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # Custom Resource to Store Configuration
  ConfigStorage:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StoreConfigFunction.Arn
      ProjectName: !Ref ProjectName
      AmplifyAppId: !GetAtt AmplifyApp.AppId
      WebhookUrl: !GetAtt AmplifyWebhook.WebhookUrl
      GitHubRepository: !Ref GitHubRepository
      Region: !Ref AWS::Region

Outputs:
  ProjectName:
    Description: 'ACE-Flow project name'
    Value: !Ref ProjectName
    Export:
      Name: !Sub '${AWS::StackName}-ProjectName'

  GitHubActionsUserName:
    Description: 'IAM user name for GitHub Actions'
    Value: !Ref GitHubActionsUser
    Export:
      Name: !Sub '${AWS::StackName}-GitHubActionsUser'

  GitHubActionsAccessKeyId:
    Description: 'Access Key ID for GitHub Actions (add to GitHub secrets as AWS_ACCESS_KEY_ID)'
    Value: !Ref GitHubActionsAccessKey
    Export:
      Name: !Sub '${AWS::StackName}-AccessKeyId'

  GitHubActionsSecretAccessKey:
    Description: 'Secret Access Key for GitHub Actions (add to GitHub secrets as AWS_SECRET_ACCESS_KEY)'
    Value: !GetAtt GitHubActionsAccessKey.SecretAccessKey
    NoEcho: true

  AmplifyAppId:
    Description: 'Amplify Application ID (add to GitHub secrets as AMPLIFY_APP_ID)'
    Value: !GetAtt AmplifyApp.AppId
    Export:
      Name: !Sub '${AWS::StackName}-AmplifyAppId'

  AmplifyAppArn:
    Description: 'Amplify Application ARN'
    Value: !GetAtt AmplifyApp.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AmplifyAppArn'

  AmplifyAppUrl:
    Description: 'Amplify Application Default Domain'
    Value: !Sub 'https://${AmplifyBranch.BranchName}.${AmplifyApp.DefaultDomain}'
    Export:
      Name: !Sub '${AWS::StackName}-AmplifyAppUrl'

  AmplifyWebhookUrl:
    Description: 'Webhook URL for triggering frontend builds (add to GitHub secrets as AMPLIFY_WEBHOOK_URL)'
    Value: !GetAtt AmplifyWebhook.WebhookUrl
    Export:
      Name: !Sub '${AWS::StackName}-WebhookUrl'

  ParameterStorePrefix:
    Description: 'Parameter Store prefix for retrieving configuration'
    Value: !Sub '/ace-flow/${ProjectName}/'
    Export:
      Name: !Sub '${AWS::StackName}-ParameterStorePrefix'

  GitHubSecretsToSet:
    Description: 'GitHub secrets that need to be configured manually'
    Value: !Sub |
      AWS_ACCESS_KEY_ID=${GitHubActionsAccessKey}
      AWS_SECRET_ACCESS_KEY=[SecretAccessKey from stack outputs]
      AWS_REGION=${AWS::Region}
      AMPLIFY_APP_ID=${AmplifyApp.AppId}
      AMPLIFY_WEBHOOK_URL=${AmplifyWebhook.WebhookUrl}

  NextSteps:
    Description: 'Next steps to complete ACE-Flow setup'
    Value: !Sub |
      1. Copy the GitHub secrets from this stack's outputs
      2. Add them to your GitHub repository: https://github.com/${GitHubRepository}/settings/secrets/actions
      3. Run: /ace-genesis "your amazing idea" in a GitHub issue
      4. Monitor deployments at: https://console.aws.amazon.com/amplify/home?region=${AWS::Region}#/${AmplifyApp.AppId}

  Documentation:
    Description: 'Links to ACE-Flow documentation and resources'
    Value: !Sub |
      - ACE-Flow Setup Guide: https://github.com/Paretofilm/ace-flow/blob/main/SETUP.md
      - Amplify Console: https://console.aws.amazon.com/amplify/home?region=${AWS::Region}#/${AmplifyApp.AppId}
      - Your App URL: https://${AmplifyBranch.BranchName}.${AmplifyApp.DefaultDomain}
      - Parameter Store Config: https://console.aws.amazon.com/systems-manager/parameters/?region=${AWS::Region}&tab=Table#list_parameter_filters=Name:Contains:/ace-flow/${ProjectName}